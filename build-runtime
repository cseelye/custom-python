#!/usr/bin/env bash
set -euETo pipefail
shopt -s inherit_errexit

SECONDS=0

PYTHON_VERSION=${PYTHON_VERSION-3.11.5}
PACKAGE_NAME=${PACKAGE_NAME-prt.tgz}
PACKAGE_NAME_DEV=${PACKAGE_NAME_DEV-prt-dev.tgz}
PRT_ROOT=${PRT_ROOT-/prt}
OUTPUT_DIR=${OUTPUT_DIR-/output}
RUNTIME_VER=${RUNTIME_VER-v0}
CACHE_URL=${CACHE_URL:-http://localhost:9000/prt/cache}
MTUNE=${MTUNE-icelake-server}
USE_CACHE=${USE_CACHE-1}
USE_PIP_CACHE=${USE_PIP_CACHE-1}
PRT_VENV_ROOT=${PRT_VENV_ROOT-${PRT_ROOT}/venv}

PRT_CONFIG_DIR=${PRT_CONFIG_DIR-config}
PRT_DEV_CONFIG_DIR=${PRT_DEV_CONFIG_DIR-dev-config}

COLOR_ESC="\e["
COLOR_OFF="${COLOR_ESC}0m"
COLOR_BOLD="${COLOR_ESC}1m"
COLOR_FAINT="${COLOR_ESC}2m"
RESET="\e[39;49;00m"
BLACK="${COLOR_ESC}30m$COLOR_BOLD"
RED="${COLOR_ESC}31m$COLOR_BOLD"
GREEN="${COLOR_ESC}32m$COLOR_BOLD"
YELLOW="${COLOR_ESC}33m$COLOR_BOLD"
BLUE="${COLOR_ESC}34m$COLOR_BOLD"
MAGENTA="${COLOR_ESC}35m$COLOR_BOLD"
CYAN="${COLOR_ESC}36m$COLOR_BOLD"
WHITE="${COLOR_ESC}37m$COLOR_BOLD"

color() {
    echo -e "${1}${2}${COLOR_OFF}"
}
indent() {
    spaces=${1-4}
    sed -u "s/^/$(printf "%${spaces}s")/";
}

log() {
    if [[ $# -eq 0 ]] ; then
        while IFS= read -r line ; do
            # printf "$(date) | %s\n" "${line}"
            echo "$(date) | ${line}"
        done
    else
        echo "$(date) | $@"
    fi
}

delay_shutdown() {
    echo
    date -ud "@$SECONDS" "+Total runtime: %Hh%Mm%Ss"
    # This is a hack to allow a little time for the log function to finish and flush stdout
    #   before the script exits and container shuts down, otherwise the gitlab runner tends to
    #   kill the script and lose the last bit of output
    sleep 0.5
}
trap 'set +x; delay_shutdown' EXIT ERR

# Redirect all stdout/stderr from here on, to the log function
exec &> >(log)

# Change to the directory the script file is in
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
pushd "${SCRIPT_DIR}" &>/dev/null

color ${CYAN} "===================================================="
color ${CYAN} "        Building Python Runtime $(uname -m)"
color ${CYAN} "===================================================="
echo

color ${MAGENTA} "* * * Building base python runtime version ${PYTHON_VERSION}"
( time (
mkdir -p "${PRT_ROOT}"
CACHE_FILE="cache_prt_python_${PYTHON_VERSION}_$(uname -m).tgz"
build_python=0
if [[ ${USE_CACHE} -ne 1 ]]; then
    build_python=1
else
# Try to find/download a cached build of python
    if [[ -e ${OUTPUT_DIR}/${CACHE_FILE} ]]; then
        echo "Using local cached build for python ${PYTHON_VERSION}"
        tar -xzf ${OUTPUT_DIR}/${CACHE_FILE} -C "${PRT_ROOT}"
        build_python=0
    elif curl -fsSL --head ${CACHE_URL}/${CACHE_FILE} &>/dev/null; then
        echo "Downloading cached build for python ${PYTHON_VERSION}"
        curl -fsSL ${CACHE_URL}/${CACHE_FILE} -o /tmp/${CACHE_FILE}
        chmod 777 /tmp/${CACHE_FILE}
        tar -xzf /tmp/${CACHE_FILE} -C "${PRT_ROOT}"
        mv /tmp/${CACHE_FILE} ${OUTPUT_DIR}/${CACHE_FILE}
        build_python=0
    else
        echo "Could not find cached build for python ${PYTHON_VERSION}"
        build_python=1
    fi
fi
# Build the python runtime if there was no cache
if [[ ${build_python} -eq 1 ]]; then
    export PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto'
    if [[ -n ${MTUNE} ]]; then
        export PYTHON_CFLAGS="-mtune=${MTUNE}"
    fi
    export PROFILE_TASK='-m test.regrtest --pgo -j0'
    VERBOSE=""
    if [[ -n ${CI-} || -n ${V-} ]]; then
        VERBOSE="--verbose"
    fi

    if [[ -n "$(find ./${PRT_CONFIG_DIR}/pre-patch -name  "*.patch" 2>/dev/null || true)" ]]; then
        cat  pre-patch/*.patch | python-build -p ${VERBOSE} ${PYTHON_VERSION} "${PRT_ROOT}"
    else
        python-build ${VERBOSE} ${PYTHON_VERSION} "${PRT_ROOT}"
    fi
    echo
    echo ">>> Updating python cache object"
    tar -czf /tmp/${CACHE_FILE} -C "${PRT_ROOT}" $(ls -A "${PRT_ROOT}")
    chmod 777 /tmp/${CACHE_FILE}
    mv /tmp/${CACHE_FILE} "${OUTPUT_DIR}/"
    ls -lh  "${OUTPUT_DIR}/${CACHE_FILE}"
fi
) ) 2>&1 | indent
echo

# Apply any post-patches
for patch_file in $(find ./${PRT_CONFIG_DIR}/post-patch -type f -name "*.patch" -exec readlink -f {} \; 2>/dev/null | sort -V || true); do
    color ${MAGENTA} "* * * Applying patch $(basename ${patch_file})"
    ( time patch -d "${PRT_ROOT}" -p2 < "${patch_file}" ) 2>&1 | indent
    echo
done

# Download the pip cache to preload it
PIP_CACHE_FILE="cache_prt_pip_$(uname -m).tgz"
mkdir -p /root/.cache
if [[ ${USE_PIP_CACHE} -eq 1 ]]; then
    if [[ -e ${OUTPUT_DIR}/${PIP_CACHE_FILE} ]]; then
        echo ">>> Preloading pip cache with local artifact"
        tar -xzf ${OUTPUT_DIR}/${PIP_CACHE_FILE} -C /root/.cache
    elif curl -fsSL --head ${CACHE_URL}/${PIP_CACHE_FILE} &>/dev/null; then
        echo ">>> Preloading pip cache with downloaded artifact"
        curl -fsSL ${CACHE_URL}/${PIP_CACHE_FILE} | tar -xz -C /root/.cache || true
    fi
    echo
fi

# Configure and upgrade pip
cp ./pip.conf "${PRT_ROOT}"
"${PRT_ROOT}"/bin/pip install --upgrade pip
# Install python packages
CONSTRAINT_FILE="${PRT_CONFIG_DIR}/constraints.txt"
CONSTRAINT_ARG=
if [[ -e ${CONSTRAINT_FILE} ]]; then
    CONSTRAINT_ARG="--constraint ${CONSTRAINT_FILE}"
fi
for req_file in $(find ./${PRT_CONFIG_DIR}/requirements -type f -name "*.txt" -exec readlink -f {} \; 2>/dev/null | sort -V || true); do
    color ${MAGENTA} "* * * Installing packages from $(basename ${req_file})"
    ( time "${PRT_ROOT}"/bin/pip install --upgrade --force-reinstall ${CONSTRAINT_ARG} --requirement "${req_file}"
      "${PRT_ROOT}"/bin/pip check || true ) 2>&1 | indent
    echo
done

# Run customization scripts
for script in $(find ./${PRT_CONFIG_DIR}/scripts -type f -executable -exec readlink -f {} \; 2>/dev/null | sort -V || true); do
    color ${MAGENTA} "* * * Running customization script $(basename ${script})"
    ( export PRT_ROOT
      export PRT_VENV_ROOT
      export CONSTRAINT_FILE
      time "${script}"
      "${PRT_ROOT}"/bin/pip check || true ) 2>&1 | indent
    echo
done

echo ">>> Updating pip cache object"
(
echo
tar -czf /tmp/${PIP_CACHE_FILE} -C /root/.cache pip
chmod 777 /tmp/${PIP_CACHE_FILE}
mv /tmp/${PIP_CACHE_FILE} ${OUTPUT_DIR}/
echo
) 2>&1 | indent

# Create a manifest
"${PRT_ROOT}"/bin/pip list --format=json | jq '{"python_packages": .}' \
    | jq '. += {"python_version": "'${PYTHON_VERSION}'", "runtime_version": "'${RUNTIME_VER}'"}' \
    > "${PRT_ROOT}"/manifest.json

# Create the package archive
color ${MAGENTA} "* * * Creating package"
tmpfile="$(mktemp)"
( time (
tar -czf "${tmpfile}" -C "${PRT_ROOT}" $(ls -A "${PRT_ROOT}")
chmod 777 "${tmpfile}"
mv "${tmpfile}" "${OUTPUT_DIR}/${PACKAGE_NAME}"
cp "${PRT_ROOT}/manifest.json" "${OUTPUT_DIR}/${PACKAGE_NAME%%.*}.manifest.json"
chmod 664 "${OUTPUT_DIR}/${PACKAGE_NAME%%.*}.manifest.json"
ls -lh "${OUTPUT_DIR}/${PACKAGE_NAME%%.*}"*
) ) 2>&1 | indent


echo
echo
color ${CYAN} "===================================================="
color ${CYAN} "     Building Python Runtime (DEV) $(uname -m)"
color ${CYAN} "===================================================="
echo

# Apply any patches
for patch_file in $(find ./${PRT_DEV_CONFIG_DIR}/patch -type f -name "*.patch" -exec readlink -f {} \; 2>/dev/null | sort -V || true); do
    color ${MAGENTA} "* * * Applying patch $(basename ${patch_file})"
    ( time patch -d "${PRT_ROOT}" -p2 <  "${patch_file}" ) 2>&1 | indent
    echo
done

# Download the pip cache to preload it
PIP_DEV_CACHE_FILE="cache_prt_dev_pip_$(uname -m).tgz"
mkdir -p /root/.cache
if [[ ${USE_PIP_CACHE} -eq 1 ]]; then
    if [[ -e ${OUTPUT_DIR}/${PIP_DEV_CACHE_FILE} ]]; then
        echo ">>> Preloading dev pip cache with local artifact"
        tar -xzf ${OUTPUT_DIR}/${PIP_DEV_CACHE_FILE} -C /root/.cache
    elif curl -fsSL --head ${CACHE_URL}/${PIP_DEV_CACHE_FILE} &>/dev/null; then
        echo ">>> Preloading dev pip cache with downloaded artifact"
        curl -fsSL ${CACHE_URL}/${PIP_DEV_CACHE_FILE} | tar -xz -C /root/.cache || true
    fi
    echo
fi

# Install python packages
DEV_CONSTRAINT_FILE=${PRT_DEV_CONFIG_DIR}/constraints.txt
if [[ -e ${DEV_CONSTRAINT_FILE} ]]; then
    CONSTRAINT_ARG+=" --constraint ${DEV_CONSTRAINT_FILE}"
fi
for req_file in $(find ./${PRT_DEV_CONFIG_DIR}/requirements -type f -name "*.txt" -exec readlink -f {} \; 2>/dev/null | sort -V || true); do
    color ${MAGENTA} "* * * Installing packages from $(basename ${req_file})"
    ( time "${PRT_ROOT}"/bin/pip install --upgrade --force-reinstall ${CONSTRAINT_ARG} --requirement "${req_file}"
      "${PRT_ROOT}"/bin/pip check || true ) 2>&1 | indent
    echo
done

# Run customization scripts
for script in $(find ./${PRT_DEV_CONFIG_DIR}/scripts -type f -executable -exec readlink -f {} \; 2>/dev/null | sort -V || true); do
    color ${MAGENTA} "* * * Running customization script $(basename ${script})"
    ( export PRT_ROOT
      export PRT_VENV_ROOT
      export CONSTRAINT_FILE
      time "${script}"
      "${PRT_ROOT}"/bin/pip check || true ) 2>&1 | indent
    echo
done

echo ">>> Updating dev pip cache object"
(
echo
tar -czf /tmp/${PIP_DEV_CACHE_FILE} -C /root/.cache pip
chmod 777 /tmp/${PIP_DEV_CACHE_FILE}
mv /tmp/${PIP_DEV_CACHE_FILE} ${OUTPUT_DIR}/
echo
) 2>&1 | indent

# Create manifest
"${PRT_ROOT}"/bin/pip list --format=json | jq '{"python_packages": .}' \
    | jq '. += {"python_version": "'${PYTHON_VERSION}'", "runtime_version": "'${RUNTIME_VER}'"}' \
    > "${PRT_ROOT}"/manifest.json

# Create the package archive
color ${MAGENTA} "* * * Creating dev package"
tmpfile="$(mktemp)"
( time (
tar -czf "${tmpfile}" -C "${PRT_ROOT}" $(ls -A "${PRT_ROOT}")
chmod 777 "${tmpfile}"
mv "${tmpfile}" "${OUTPUT_DIR}/${PACKAGE_NAME_DEV}"
cp "${PRT_ROOT}/manifest.json" "${OUTPUT_DIR}/${PACKAGE_NAME_DEV%%.*}.manifest.json"
chmod 664 "${OUTPUT_DIR}/${PACKAGE_NAME_DEV%%.*}.manifest.json"
ls -lh "${OUTPUT_DIR}/${PACKAGE_NAME_DEV%%.*}"*
) ) 2>&1 | indent



popd &>/dev/null
exit 0
